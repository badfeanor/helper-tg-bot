import telebot
import datetime
import re
import json
import requests

from bs4 import BeautifulSoup as bs
from settings import config

bot = telebot.TeleBot(config.BOT_TOKEN, parse_mode="markdown")

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è, —Å–µ–≥–æ–¥–Ω—è " + str(datetime.date.today()) + ". \
    –ë–æ—Ç –¥–µ–ª–∏—Ç—Å—è —Å –≤–∞–º–∏ –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç —Å —Å–∞–π—Ç–∞ –¶–ë –∏ –ø–æ–≥–æ–¥–æ–π —Å –Ø–Ω–¥–µ–∫—Å–∞. –û—Ç–ø—Ä–∞–≤—å /menu ")

@bot.message_handler(commands=["menu"])
def currency(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    button_1 = telebot.types.KeyboardButton("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üìä")
    button_2 = telebot.types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –≤ –ê–¥–ª–µ—Ä–µ üåù")
    button_3 = telebot.types.KeyboardButton("–ù–∞–∑–∞–¥")

    markup.add(button_1, button_2, button_3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)

@bot.message_handler(content_types=["text"])
def reply(message):
    match message.text:
        case "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üìä":
            bot.send_message(message.chat.id, get_currency(date_to_parse=datetime.date.today()))
        case "–ü–æ–≥–æ–¥–∞ –≤ –ê–¥–ª–µ—Ä–µ üåù":
            bot.send_message(message.chat.id, yandex_weather('43.430664','39.931168',config.YANDEX_TOKEN))
        case "–ù–∞–∑–∞–¥":
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            bot.send_message(message.chat.id, "–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ */currency*, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.", reply_markup=types.ReplyKeyboardRemove())
        case _:
            bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –º–Ω–µ –∫–æ–º–∞–Ω–¥—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ */start* –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.")

def get_currency(date_to_parse) -> str:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –∫—É—Ä—Å–∞ –¶–ë. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–π –∫—É—Ä—Å —É–∂–µ –ø–∞—Ä—Å–∏–ª—Å—è, —Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–æ–∑—å–º—É—Ç—Å—è –∏–∑ –∫—ç—à–∞.
    :param date_to_parse: –î–∞—Ç–∞ –∫—É—Ä—Å–∞.
    :return: –¢–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º –≤–∞–ª—é—Ç—ã –∏ –µ—ë –∫—É—Ä—Å–æ–º.
    """
    day, month, year = date_to_parse.day, date_to_parse.month, date_to_parse.year
    compiled_letters_pattern = re.compile(r"[–∞-—è–ê-—è]+")
    compiled_numbers_pattern = re.compile(r"\d+")
    valuts = ['–î–æ–ª–ª–∞—Ä –°–®–ê', '–ï–≤—Ä–æ', '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å']
    answer = ''
    url = f"https://cbr.ru/scripts/XML_daily.asp?date_req={day}/{month}/{year}"

    request = requests.get(url)
    soup = bs(request.text, "lxml")

    for tag in soup.findAll("valute"):
        result = tag.get_text(strip=True)
        currency_name = " ".join(compiled_letters_pattern.findall(result))
        numbers = compiled_numbers_pattern.findall(result)

        price = f"{numbers[-2]}.{numbers[-1]}"

        if currency_name in valuts:
            answer = answer + str(f"–ö—É—Ä—Å *{currency_name}* –Ω–∞ {day}.{month}.{year}: {price}\n")

    return answer

def yandex_weather(latitude, longitude, token_yandex: str):
    url_yandex = f'https://api.weather.yandex.ru/v2/informers/?lat={latitude}&lon={longitude}&[lang=ru_RU]'
    yandex_req = requests.get(url_yandex, headers={'X-Yandex-API-Key': token_yandex}, verify=False)
    conditions = {'clear': '—è—Å–Ω–æ', 'partly-cloudy': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ', 'cloudy': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
                  'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ', 'drizzle': '–º–æ—Ä–æ—Å—å', 'light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
                  'rain': '–¥–æ–∂–¥—å', 'moderate-rain': '—É–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π', 'heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
                  'continuous-heavy-rain': '–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', 'showers': '–ª–∏–≤–µ–Ω—å',
                  'wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º', 'light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥', 'snow': '—Å–Ω–µ–≥',
                  'snow-showers': '—Å–Ω–µ–≥–æ–ø–∞–¥', 'hail': '–≥—Ä–∞–¥', 'thunderstorm': '–≥—Ä–æ–∑–∞',
                  'thunderstorm-with-rain': '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π', 'thunderstorm-with-hail': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'
                  }
    wind_dir = {'nw': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π', 'n': '—Å–µ–≤–µ—Ä–Ω—ã–π', 'ne': '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', 'e': '–≤–æ—Å—Ç–æ—á–Ω—ã–π',
                'se': '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π', 's': '—é–∂–Ω—ã–π', 'sw': '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π', 'w': '–∑–∞–ø–∞–¥–Ω—ã–π', '—Å': '—à—Ç–∏–ª—å'}

    yandex_json = json.loads(yandex_req.text)
    yandex_json['fact']['condition'] = conditions[yandex_json['fact']['condition']]
    yandex_json['fact']['wind_dir'] = wind_dir[yandex_json['fact']['wind_dir']]
    for parts in yandex_json['forecast']['parts']:
        parts['condition'] = conditions[parts['condition']]
        parts['wind_dir'] = wind_dir[parts['wind_dir']]

    dict_weather = dict()
    params = ['condition', 'wind_dir', 'wind_speed', 'pressure_mm', 'humidity', 'temp_water']
    for parts in yandex_json['forecast']['parts']:
        dict_weather[parts['part_name']] = dict()
        dict_weather[parts['part_name']]['temp'] = parts['temp_avg']
        for param in params:
            dict_weather[parts['part_name']][param] = parts[param]

    dict_weather['fact'] = dict()
    dict_weather['fact']['temp'] = yandex_json['fact']['temp']
    for param in params:
        dict_weather['fact'][param] = yandex_json['fact'][param]

    dict_weather['link'] = yandex_json['info']['url']

    return (f'–ü–æ–≥–æ–¥–∞ –≤ –ê–¥–ª–µ—Ä–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!'
            f' –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {dict_weather["fact"]["temp"]} –≥—Ä–∞–¥—É—Å–æ–≤.'
            f' –ê –Ω–∞ –Ω–µ–±–µ {dict_weather["fact"]["condition"]}.'
            f' –í–µ—Ç–µ—Ä {dict_weather["fact"]["wind_dir"]}, –∞ —Å–∫–æ—Ä–æ—Å—Ç—å {dict_weather["fact"]["wind_speed"]} –º/—Å.'
            f' –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã {dict_weather["fact"]["temp_water"]} –≥—Ä–∞–¥—É—Å–æ–≤.')

bot.infinity_polling()